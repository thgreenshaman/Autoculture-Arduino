#!/bin/bash

trap ctrl_c INT

function ctrl_c() {
        tput cnorm
        exit;
}


URL='http://autoculture.local'
Vars()
{
    TEMP=$(curl -s "$URL/temp")
    HUM=$(curl -s "$URL/hum")
    LS=$(curl -s "$URL/ls")
    FS=$(curl -s "$URL/fs")
    HS=$(curl -s "$URL/hs")
    PS=$(curl -s "$URL/ps")
    TIME=$(curl -s "$URL/unotime")
}

VERSION='1.0b1'
NC='\033[0m'
GREEN='\033[0;32m'
RED='\033[0;31m'
ON='ON'
OFF='OFF'

Help()
{
   echo "  /---------------------------------------\\"
   echo -e "  |\t${GREEN}->Autoculture Cli ${VERSION} :Help${NC}\t  |"
   echo "  \\---------------------------------------/"
   echo
   echo -e "The Autoculture Cli client is designed for retrieving"
   echo -e "data from an Autoculture Arduino v0.01 unit attached"
   echo -e "to the local network. Autoculture Arduino should be"
   echo -e "available on url http://autoculture.local although"
   echo -e "specifying the IP address will make the script run"
   echo -e "faster (By a LOT!)"
   echo
   echo -e "\tSyntax: autoculture [-p <ip address> -option]"
   echo
   echo -e "\toptions:"
   echo
   echo -e "    h     Print this help screen."
   echo -e "    p     IP address of Autoculture arduino unit."
   echo -e "    T     Print the current temperature."
   echo -e "    H     Print the current humidity."
   echo -e "    l     Print light state."
   echo -e "    f     Print fan state."
   echo -e "    w     Print heating state."
   echo -e "    c     Print cooling state."
   echo -e "    d     Live update display."
   echo
}

Color()
{
	if [[ $1 == 'ON' ]]; then
             echo -e "${GREEN}$1${NC}"
         else
             echo -e "${RED}$1${NC}"
    fi
}

Ag()
{
    echo
    echo -e " /--------------------------------------\\"
    echo -e " |   ${GREEN}->Autoculture Arduino Cli ${VERSION} ${NC}   |"
    echo -e " |--------------------------------------|"
    echo -e " |\t\t  $TIME\t\t\t|"
    echo -e " |--------------------------------------|"
    echo -e " |\t Temperature:\t$TEMP°C\t\t|"
    echo -e " |\t Humidity:\t$HUM%\t\t|"
    echo -e " |\t Lights:\t$( Color $LS )\t\t|"
    echo -e " |\t Fan:\t\t$( Color $FS )\t\t|"
    echo -e " |\t Heating:\t$( Color $HS )\t\t|"
    echo -e " |\t Cooling:\t$( Color $PS )\t\t|"
    echo -e " \\--------------------------------------/"
}

Fan()
{
    echo -e "Fan:\t\t$(Color $FS)"
}
Lights()
{
	echo -e "Lights:\t\t$(Color $LS)"
}
Heating()
{
	echo -e "Heating:\t$(Color $HS)"
}
Cooling()
{
	echo -e "Cooling:\t\t$(Color $PS)"
}

Dyn()
{
tput civis
while true; do

  Vars
  out="$(Ag)"
  clear
  echo "$out"
  echo -e "\tPress q or Q to quit."
  read -t 0.25 -N 1 input
  if [[ $input = 'q' ]] || [[ $input = 'Q' ]]; then
      echo
      tput cnorm
      exit;
  fi
  sleep .2
done
tput cnorm

exit;
}

while getopts 'hTHALFCWalfcwdp:' option; do
   case $option in
      p) URL=${OPTARG}
      ;;
      h) Help
         exit;;
      T) Vars; echo -e "Tempterature:\t$TEMP°c"
         exit;;
      H) Vars; echo -e "Humidity:\t$HUM%"
         exit;;
      L) Vars; Lights
         exit;;
      l) Vars; Lights
         exit;;
      F) Vars; Fan
         exit;;
      f) Vars; Fan
         exit;;
      W) Vars; Heating
         exit;;
      w) Vars; Heating
         exit;;
      C) Vars; Cooling
         exit;;
      c) Vars; Cooling
         exit;;
      d) Dyn
         ;;
     \?) echo "Error: Invalid option"
         exit 1;;
   esac
done

Vars
Ag
